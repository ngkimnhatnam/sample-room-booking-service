# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build --if-present
      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client 
          mysql --host 13.49.37.220 --port ${{ job.services.mysql.ports['3306'] }} -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SHOW DATABASES"
      - name: Testing phase
        run: npm test
        env:
          MY_HASH_SALT: ${{ secrets.MY_HASH_SALT }}
          MY_HASH_ITERATIONS: ${{ secrets.MY_HASH_ITERATIONS }}
          MY_HASH_LENGTH: ${{ secrets.MY_HASH_LENGTH }}
          MY_HASH_DIGEST: ${{ secrets.MY_HASH_DIGEST }}
      - name: Build and push Docker images
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${{ secrets.DOCKER_IMAGE }}
          # Dockerhub repo to push the build as image
          registry: docker.io
          # Docker engine
          username: ${{ secrets.DOCKER_USERNAME }}
          # DockerHub username as secret set in Github Secret
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Dockerhub account password
